---
import parseTomlToJson from "@/lib/utils/parseTomlToJson";
import { supportedLanguages, useTranslations } from "@/lib/utils/languageParser.ts";
import { getEntryCTM } from "@/lib/contentParser.astro";
import Base from "@/layouts/Base.astro";
import CallToAction from "@/components/sections/CallToAction.astro";
import CertificationsSection from "@/components/sections/CertificationsSection.astro";
export const prerender = false;

// 1) Rutas estáticas: /certifications y /es/certifications, /en/certifications...
export async function getStaticPaths() {
  const config = parseTomlToJson("./src/config/config.toml");
  const { default_language, show_default_lang_in_url } = config.settings.multilingual;
  const all = supportedLanguages.map((l) => l.languageCode);

  const paths = [{ params: { lang: undefined } }];
  all
    .filter((code) => code !== default_language)
    .forEach((code) => paths.push({ params: { lang: code } }));

  return paths;
}

// 2) Configuración: carpeta “pages”, slug “certifications”
const config = parseTomlToJson("./src/config/config.toml");
const PAGES_FOLDER = "pages";
const SLUG = "certifications";

// 3) Locale efectivo
const locale = Astro.params.lang ?? config.settings.multilingual.default_language;

// 4) Carga de markdown
const entry = await getEntryCTM(PAGES_FOLDER, SLUG, locale);
if (!entry) {
  throw new Error(`No se encontró '/${SLUG}' en la colección '${PAGES_FOLDER}'.`);
}

// 5) Frontmatter
const data = entry.data;
const { Content } = await entry.render();

// 6) Traducciones
const translations = await useTranslations(locale);

---

<Base {...data}>
  <CertificationsSection pagination={{ enable: true, currentPage: 1 }} />
  <CallToAction />
</Base>

