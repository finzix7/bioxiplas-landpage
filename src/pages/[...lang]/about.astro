---
import parseTomlToJson from "@/lib/utils/parseTomlToJson";
import {
  supportedLanguages,
  useTranslations,
} from "@/lib/utils/languageParser.ts";
import { getEntryCTM } from "@/lib/contentParser.astro";
import Base from "@/layouts/Base.astro";
import SinglePageLayout from "@/components/SinglePageLayout.astro";
import CallToAction from "@/components/sections/CallToAction.astro";
import buildToc from "@/lib/utils/buildToc";
import FeaturesSection from "@/components/sections/FeaturesSection.astro";

// 1) Generar rutas para pre-render:
//    - `lang = undefined` → /about
//    - `lang = "es"`      → /es/about
export async function getStaticPaths() {
  const config = parseTomlToJson("./src/config/config.toml");
  const { default_language, show_default_lang_in_url } =
    config.settings.multilingual;

  // Idiomas configurados (["en", "es", ...])
  const all = supportedLanguages.map((l) => l.languageCode);

  // Siempre incluyo el caso sin prefijo
  const paths = [{ params: { lang: undefined } }];

  // Para cada idioma distinto al default, agrego /{lang}/about
  all
    .filter((code) => code !== default_language)
    .forEach((code) => paths.push({ params: { lang: code } }));

  return paths;
}

// 2) Lectura de config y slug
const config = parseTomlToJson("./src/config/config.toml");
const PAGES_FOLDER = "pages";
const SLUG = "about";

// 3) Determino el locale efectivo
//    Astro.params.lang es string | undefined, así que
//    si viene undefined uso el default del config
const locale =
  Astro.params.lang ?? config.settings.multilingual.default_language;

// 4) Cargo la entrada Markdown
const entry = await getEntryCTM(PAGES_FOLDER, SLUG, locale);
if (!entry) {
  throw new Error(
    `No se encontró '/${SLUG}' en la colección '${PAGES_FOLDER}'.`,
  );
}

// 5) Frontmatter + renderizado MDX/MD
const data = entry.data;
const { Content, headings = [] } = await entry.render();

// 6) Tabla de contenidos si está habilitada
const tocConfig = config.settings.markup.table_of_contents;
const tocHeadings =
  tocConfig.enable && headings.length ? buildToc(headings) : [];

// 7) Traducciones para el locale actual
const translations = await useTranslations(locale);
---

<Base {...data}>
  <SinglePageLayout
    layout="modern"
    translations={translations}
    content={{
      ...data,
      table_of_contents: tocConfig,
      tocHeadings,
      Content,
    }}
  />
  <FeaturesSection />
  <CallToAction />
</Base>
