---
import CallToAction from "@/components/sections/CallToAction.astro";
import Base from "@/layouts/Base.astro";
import parseTomlToJson from "@/lib/utils/parseTomlToJson";
import { getEntryCTM } from "@/lib/contentParser.astro";
import { fetchBlogBySlug } from "@/lib/payload";
import { useTranslations } from "@/lib/utils/languageParser.ts";
import SinglePageLayout from "@/components/SinglePageLayout.astro";
import { slugifyyy } from "@/lib/utils/textConverter";
import { markdownify } from "@/lib/utils/textConverter";

export const prerender = false;

const { single } = Astro.params;
const post = await fetchBlogBySlug(single!, Astro.currentLocale);
const config = parseTomlToJson("@/config/config.toml");
const Content = post?.content ? markdownify(post.content, true) : "";
const { table_of_contents } = config.settings.markup;

const { author } = post || {};
const translations = await useTranslations(Astro.currentLocale as string);

let tocHeadings;

// Get Author Details
let authorEntry = [];
if (author) {
  const slug = slugifyyy(author);
  const entry = await getEntryCTM("author", slug, Astro.currentLocale);
  authorEntry = entry?.data || [];
}

// Generate table of contents
// Rich text from Payload is already HTML, so we skip heading parsing for now
---

<Base {...post}>
  <SinglePageLayout
    layout={"modern"}
    translations={translations}
    content={{
      ...post,
      table_of_contents,
      tocHeadings,
      author: authorEntry,
      Content,
    }}
  />
  <CallToAction />
</Base>
