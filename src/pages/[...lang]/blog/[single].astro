---
import CallToAction from "@/components/sections/CallToAction.astro";
import Base from "@/layouts/Base.astro";
import parseTomlToJson from "@/lib/utils/parseTomlToJson";
import { useTranslations } from "@/lib/utils/languageParser.ts";
import SinglePageLayout from "@/components/SinglePageLayout.astro";
import { markdownify } from "@/lib/utils/textConverter";
import buildToc from "@/lib/utils/buildToc";
import extractHeadings from "@/lib/utils/extractHeadings";
import { fetchBlogBySlug } from "@/lib/payload";

export const prerender = false;

const { single } = Astro.params;
const config = parseTomlToJson("@/config/config.toml");
const blog = await fetchBlogBySlug(single!, Astro.currentLocale);
const blogData = blog || {};
const { table_of_contents } = config.settings.markup;

const translations = await useTranslations(Astro.currentLocale as string);

let tocHeadings;
let contentHtml = "";
let authorEntry: any = {};

const categoryNames =
  blog?.categories?.map((category: { name: string }) => category.name) || [];

if (blog?.content) {
  if (typeof blog.content === "string") {
    tocHeadings = buildToc(extractHeadings(blog.content));
    contentHtml = markdownify(blog.content, true) as string;
  } else {
    console.error("blog.content is not a string:", blog.content);
  }
}

if (blog?.author) {
  authorEntry = { title: blog.author };
}
---

<Base {...blogData}>
  <SinglePageLayout
    layout={"modern"}
    translations={translations}
    content={{
      ...blog,
      table_of_contents,
      tocHeadings,
      categories: categoryNames,
      author: authorEntry,
      Content: contentHtml,
    }}
  />
  <CallToAction />
</Base>
