---
import parseTomlToJson from "@/lib/utils/parseTomlToJson";
import { generatePaths, useTranslations } from "@/lib/utils/languageParser.ts";
import { getEntryCTM } from "@/lib/contentParser.astro";
import Base from "@/layouts/Base.astro";
import SinglePageLayout from "@/components/SinglePageLayout.astro";
import CallToAction from "@/components/sections/CallToAction.astro";
import CertificationsSection from "@/components/sections/CertificationsSection.astro";
import buildToc from "@/lib/utils/buildToc";

export const prerender = false;

// 1) Rutas estáticas: /certifications y /es/certifications, /en/certifications...
export function getStaticPaths() {
  return generatePaths();
}

// 2) Configuración: carpeta “pages”, slug “certifications”
const config = parseTomlToJson("./src/config/config.toml");
const PAGES_FOLDER = "pages";
const SLUG = "certifications";

// 3) Locale efectivo
const locale = Astro.params.lang ?? config.settings.multilingual.default_language;

// 4) Carga de markdown para metadatos y posible contenido introductorio
const entry = await getEntryCTM(PAGES_FOLDER, SLUG, locale);
if (!entry) {
  throw new Error(`No se encontró '/${SLUG}' en la colección '${PAGES_FOLDER}'.`);
}

// 5) Frontmatter + render MDX/MD
const data = entry.data;
const { Content, headings = [] } = await entry.render();

// 6) TOC si está activo
const tocConfig = config.settings.markup.table_of_contents;
const tocHeadings = tocConfig.enable && headings.length ? buildToc(headings) : [];

// 7) Traducciones
const translations = await useTranslations(locale);
---

<Base {...data}>
  <SinglePageLayout
    layout="modern"
    translations={translations}
    content={{
      ...data,
      table_of_contents: tocConfig,
      tocHeadings,
      Content,
    }}
  />
  <CertificationsSection pagination={{ enable: true, currentPage: 1 }} />
  <CallToAction />
</Base>
