---
import ReactIcons from "@/helpers/ReactIcons.astro";
import type { VideoConfig } from "@/types";

interface Props {
  videos?: VideoConfig[];
}

const videos: VideoConfig[] = Astro.props.videos ?? [];

function getYouTubeId(url: string) {
  const m1 = url.match(/[?&]v=([^&]+)/);
  if (m1?.[1]) return m1[1];
  const m2 = url.match(/youtu\.be\/([^?&]+)/);
  return m2?.[1] ?? url;
}

const processed = videos.map((v) =>
  v.provider === "youtube"
    ? { ...v, embedId: getYouTubeId(v.src) }
    : { ...v, embedId: v.src }
);

const config = {
  autoplay: true,
  hideControls: false,
  debug: false,
  iconUrl: "/plyr/plyr.svg",
  blankVideo: "/plyr/blank.mp4",
  youtube: { noCookie: true },
};

let players: any[] = [];
---

{processed.length > 0 && (
  <div
    id="video-modal"
    class="hs-overlay pointer-events-none fixed inset-0 z-[60] hidden overflow-visible"
    role="dialog"
    tabindex="-1"
  >
    <div
      class="hs-overlay-animation-target hs-overlay-open:mt-7 hs-overlay-open:opacity-100 hs-overlay-open:duration-500 flex h-full items-center justify-center opacity-0 transition-[opacity,margin] ease-out"
    >
      <div class="pointer-events-auto relative w-full max-w-[95vw] sm:max-w-[85vw] md:max-w-[75vw] p-2 sm:p-6 mx-auto overflow-visible">
        <!-- Cerrar -->
        <button
          type="button"
          aria-label="Close"
          data-hs-overlay="#video-modal"
          data-hs-overlay-options='{"emulateScrollbarSpace": true}'
          class="absolute right-4 top-4 z-20 flex h-10 w-10 items-center justify-center rounded-full bg-white/90 hover:bg-white transition"
        >
          <span class="sr-only">Close</span>
          <ReactIcons icon="IoCloseSharp" class="h-6 w-6 text-black" />
        </button>

        <!-- Flechas -->
        <button class="carousel-prev absolute left-2 top-1/2 z-20 p-2 rounded-full bg-white/75 hover:bg-white">
          <ReactIcons icon="IoChevronBack" class="h-6 w-6 text-black" />
        </button>
        <button class="carousel-next absolute right-2 top-1/2 z-20 p-2 rounded-full bg-white/75 hover:bg-white">
          <ReactIcons icon="IoChevronForward" class="h-6 w-6 text-black" />
        </button>

        <!-- Carrusel -->
        <div class="video-carousel mx-auto flex items-center gap-2 sm:gap-4 overflow-x-auto scroll-smooth snap-x snap-mandatory">
          {processed.map((video) => (
            <div class="snap-start flex-shrink-0 w-full px-1 sm:px-2">
              <div class="aspect-video w-full rounded-lg shadow-lg overflow-hidden">
                {video.provider === "html5" ? (
                  <video
                    class="w-full h-full object-cover"
                    playsinline
                    controls
                    autoplay={video.autoplay}
                    muted
                    loop
                    data-id={video.id}
                    data-poster={video.poster}
                    data-plyr-config={JSON.stringify(config)}
                  >
                    <source src={video.embedId} type={`video/${video.type}`} />
                  </video>
                ) : (
                  <iframe
                    class="w-full h-full"
                    src={`https://www.youtube.com/embed/${video.embedId}?rel=0&showinfo=0`}
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                    allowfullscreen
                  ></iframe>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>
)}

<script>
  // @ts-nocheck
  import "preline/src/plugins/overlay";
  import Plyr from "plyr";
  import "plyr/dist/plyr.css";

  document.addEventListener("DOMContentLoaded", () => {
    const modal = document.getElementById("video-modal");
    const carousel = modal?.querySelector(".video-carousel");
    const prev = modal?.querySelector(".carousel-prev");
    const next = modal?.querySelector(".carousel-next");

    if (carousel && prev && next) {
      prev.addEventListener("click", () => {
        if (carousel.scrollLeft <= 0) {
          carousel.scrollTo({ left: carousel.scrollWidth, behavior: "smooth" });
        } else {
          carousel.scrollBy({ left: -carousel.clientWidth, behavior: "smooth" });
        }
      });
      next.addEventListener("click", () => {
        if (carousel.scrollLeft + carousel.clientWidth >= carousel.scrollWidth) {
          carousel.scrollTo({ left: 0, behavior: "smooth" });
        } else {
          carousel.scrollBy({ left: carousel.clientWidth, behavior: "smooth" });
        }
      });
    }
  });

  document.addEventListener("open.hs.overlay", (e) => {
    const overlay = e.detail.payload;
    if (overlay.id === "video-modal") {
      if (players.length === 0) players = Plyr.setup(".video-player", config);
      players.forEach((p) => p.play());
    }
  });

  document.addEventListener("close.hs.overlay", (e) => {
    const overlay = e.detail.payload;
    if (overlay.id === "video-modal") {
      players.forEach((p) => p.pause());
      overlay.querySelector(".video-carousel")?.scrollTo({ left: 0 });
    }
  });
</script>
