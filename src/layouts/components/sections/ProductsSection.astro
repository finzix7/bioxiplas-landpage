---
import type { Section } from "@/types";
import { sortByDate } from "@/lib/utils/sortFunctions";
import parseTomlToJson from "@/lib/utils/parseTomlToJson";
import { getEntryCTM } from "@/lib/contentParser.astro";
import { fetchProducts } from "@/lib/payload";
import Subtitle from "../widgets/Subtitle.astro";
import Pagination from "../widgets/Pagination.astro";
import { markdownify } from "@/lib/utils/textConverter";
import overrideObjects from "@/lib/utils/overrideObjects.ts";
import ProductCard from "@/layouts/components/cards/ProductCard.astro";

const config = parseTomlToJson("./src/config/config.toml");
const { products_folder }: { products_folder: "products" } = config.settings;

type product_section_type = Section;
type Props = {
  content?: product_section_type;
  pagination: {
    enable: boolean;
    currentPage: number;
  };
};

let default_content = (
  await getEntryCTM("sections", "products-section", Astro.currentLocale)
)?.data as product_section_type;

let actual_content = overrideObjects(
  { ...default_content },
  Astro.props.content,
) as product_section_type;

let { enable = true, title, subtitle } = actual_content;

const currentPage = Astro.props.pagination?.currentPage || 1;
const limit = config.settings.pagination;
const productResponse = await fetchProducts({
  page: currentPage,
  limit,
  locale: Astro.currentLocale,
});

let products = productResponse?.docs?.map((doc: any) => ({
  data: doc,
  slug: doc.slug || doc.id,
  collection: "products",
})) || [];
products = sortByDate(products);

let totalPages = productResponse?.totalPages || 1;
---

{enable && (
  <section class="relative overflow-hidden">
    <div class="container">
      <div class="mx-auto max-w-2xl text-center" data-aos="fade-up-sm">
        <Subtitle content={subtitle} />
        {title && (
          <h2
            class="h2 has-italic-text capitalize"
            set:html={markdownify(title)}
          />
        )}
      </div>
      <div
        class="md:bg-primary/10 mt-12 space-y-16 rounded-lg md:mt-16 md:p-16"
        data-aos="fade-up-sm"
        data-aos-delay="200">
        <div class="grid gap-x-6 gap-y-10 md:grid-cols-2 xl:grid-cols-3">
          {products &&
            products.map((product, index) => (
              <ProductCard
                content={{ ...product.data, ...product }}
                data-aos="fade-up-sm"
                data-aos-delay={((index % 3) + 1) * 100}
              />
            ))}
        </div>
        <Pagination
          collection="products"
          currentPage={Astro.props.pagination?.currentPage || 1}
          totalPages={totalPages}
        />
      </div>
    </div>
  </section>
)}
