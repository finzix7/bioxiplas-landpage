---
import overrideObjects from "@/lib/utils/overrideObjects.ts";
import { markdownify } from "@/lib/utils/textConverter";
import type { Button, Section } from "@/types";
import OptimizedImage from "@/components/utilities/OptimizedImage.astro";
import { getEntryCTM } from "@/lib/contentParser.astro";
import Customers from "./Customers.astro";
import { plainify } from "@/lib/utils/textConverter";
import ButtonLink from "../buttons/ButtonLink.astro";
import VideoModal from "../widgets/VideoModal.astro";
import AnimatedText from "../widgets/AnimatedText.astro";
import type { customersSectionType } from "@/types";
import HexagonGrid from "../global/HexagonGrid.astro";
import CustomCursor from "../global/CustomCursor.astro";

type home_banner_section_type = Section & {
  buttons: Button[];
  customers: customersSectionType;
};

type Props = {
  content?: home_banner_section_type;
};

let default_content = (
  await getEntryCTM("sections", "home-banner", Astro.currentLocale)
)?.data as home_banner_section_type;

let actual_content = overrideObjects(
  { ...default_content },
  Astro.props.content
) as home_banner_section_type;

let { title, customers, description, image, buttons } =
  actual_content as home_banner_section_type;

const videoButton = buttons.find((button) => button.type === "video");
---

<section>
  <HexagonGrid />
  <CustomCursor />
  <div class="stretched-link relative pb-24 md:pb-32">
    <div class="container">
      <div class="relative z-10 mx-auto max-w-4xl space-y-10">
        <div>
          {title && (
            <AnimatedText
              class="has-italic-text font-secondary mb-6 text-center text-4xl text-white capitalize md:text-6xl/tight"
              content={markdownify(title)}
            />
          )}

          {description && (
            <AnimatedText
              class="text-center text-base leading-snug text-white/70"
              content={markdownify(description)}
              duration={0.6}
              delay={0.3}
              stagger={0.03}
            />
          )}
        </div>

        <div
          data-aos="fade-in"
          data-aos-delay="400"
          data-aos-duration="900"
          class="has-video-modal flex flex-wrap items-center justify-center gap-5"
        >
          {buttons &&
            buttons.map((button: Button) =>
              button.type !== "video" ? (
                <ButtonLink
                  content={button}
                  class="btn-md btn-primary btn-has-icon group relative z-0 flex items-center gap-4 [&>.label]:z-20"
                >
                  <span class="flex h-6 w-12 items-center justify-center rounded-full bg-white/15">
                    <OptimizedImage
                      alt="icon"
                      class="h-5 w-5 transition-all duration-300 group-hover:rotate-180"
                      src="/images/icons/svg/star.svg"
                    />
                  </span>
                </ButtonLink>
              ) : (
                <ButtonLink
                  tag={"button"}
                  content={button}
                  type="button"
                  title="Play Video"
                  aria-haspopup="dialog"
                  aria-expanded="false"
                  aria-controls={"#" + button.video?.id}
                  data-hs-overlay={"#" + button.video?.id}
                  data-hs-overlay-options={`{"emulateScrollbarSpace" : true}`}
                  class="video-modal-toggle btn-md btn-primary btn-has-icon group after:bg-primary/25 relative z-0 flex items-center gap-4 after:pointer-events-none after:absolute after:inset-0 after:z-10 after:size-full [&>.label]:z-20"
                >
                  <span class="has-animated-waves waves-white waves-sm relative z-20 flex h-6 w-6 items-center justify-center rounded-full">
                    <OptimizedImage
                      alt="icon"
                      inlineSvg={true}
                      class="text-primary ml-px h-2 w-2"
                      src="/images/icons/svg/play-icon.svg"
                    />
                  </span>
                  {button.video?.src && (
                    <video
                      autoplay
                      muted
                      loop
                      playsinline
                      class="absolute top-0 left-0 z-0 z-10 h-full w-full object-cover"
                      {...{
                        src: button.video.src.startsWith("http")
                          ? button.video.src
                          : null,
                      }}
                    >
                      {!button.video.src.startsWith("http") && (
                        <source
                          src={button.video.src}
                          type="video/mp4"
                        />
                      )}
                      Your browser does not support the video tag.
                    </video>
                  )}
                </ButtonLink>
              )
            )}
        </div>

        <Customers
          content={customers}
          data-aos-delay="600"
          data-aos-duration="900"
          data-aos="fade-in"
        />
      </div>
    </div>
  </div>

  {videoButton && (
    <VideoModal
      video={{
        id: videoButton.video?.id,
        src: videoButton.video?.src,
        provider: videoButton.video?.provider,
      }}
    />
  )}
</section>
